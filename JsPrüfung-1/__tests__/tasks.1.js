// DO NOT edit this file
const { nameOfCity, isDivisible, missingAngle, isRaining, geometricalSequence, multiplesOfThree, powerOf, vowelCount } = require("../index");


describe('nameOfCity', () => {
    test.each`
    input| expected 
    ${"Los Angeles"} | ${"Los Angeles"}
    ${"New York"} | ${"New York"}
    ${"newcastle"} | ${"newcastle"}
    ${"Valletta"} | ${"The city name does not begin with Los or New"}
    ${"los almost"} | ${"los almost"}
    `('check if $input contains `los` or `new`: $expected', ({input, expected}) => {
            expect(nameOfCity(input)).toBe(expected);
        });
});

describe('isDivisible', () => {
    test.each`
    input| expected 
    ${100} | ${true}
    ${1000} | ${true}
    ${1} | ${false}
    ${48} | ${false}
    ${10000} | ${true}
    `('check if $input is divisible by 100: $expected', ({input, expected}) => {
            expect(isDivisible(input)).toBe(expected);
        });
});

describe('missingAngle', () => {
    test.each`
    angleOne| angleTwo| expected 
    ${45} | ${45} | ${"right angle"}
    ${10} | ${10} | ${"obtuse"}
    ${90} | ${45} | ${"acute"}
    `('first angle: $angleOne°, second angle: $angleTwo° so third angle is $expected', ({angleOne, angleTwo, expected}) => {
            expect(missingAngle(angleOne, angleTwo)).toBe(expected);
        });
});

describe('isRaining', () => {
    test.each`
    input| expected 
    ${true} | ${"wet day - you need an umbrella!"}
    ${false} | ${"dry day - leave your umbrella at home!"}
    `('Is it raining today?: if $input then $expected', ({input, expected}) => {
            expect(isRaining(input)).toBe(expected);
        });
});

//loops

test('return a geometrical sequence', () => {
    expect(geometricalSequence()).toBe("1 2 4 8 16 32 64 128 256");
})

test('returns first five multiples of three', () => {
    expect(multiplesOfThree()).toBe("3 6 9 12 15");
})

describe('powerOf', () => {
    test.each`
    input| expected 
    ${3} | ${27}
    ${2} | ${4}
    ${4} | ${256}
    ${9} | ${387420489}
    `('$input to the power of $input should be $expected', ({input, expected}) => {
            expect(powerOf(input)).toBe(expected);
        });
});

describe('vowelCount', () => {
    test.each`
    input| expected 
    ${"aeiou"} | ${5}
    ${"AEIOU"} | ${5}
    ${"bhjpg"} | ${0}
    ${"hello"} | ${2}
    `('$input has $expected vowels', ({input, expected}) => {
            expect(vowelCount(input)).toBe(expected);
        });
});
